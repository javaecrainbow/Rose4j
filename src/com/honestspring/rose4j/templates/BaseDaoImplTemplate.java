package com.honestspring.rose4j.templates;

import com.honestspring.rose4j.model.*;

public class BaseDaoImplTemplate
{
  protected static String nl;
  public static synchronized BaseDaoImplTemplate create(String lineSeparator)
  {
    nl = lineSeparator;
    BaseDaoImplTemplate result = new BaseDaoImplTemplate();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL + "" + NL + "import java.io.Serializable;" + NL + "import java.sql.Connection;" + NL + "import java.util.Date;" + NL + "import java.util.LinkedList;" + NL + "import java.util.List;" + NL + "" + NL + "import org.hibernate.Hibernate;" + NL + "import org.hibernate.HibernateException;" + NL + "import org.hibernate.Query;" + NL + "import org.hibernate.Session;" + NL + "import org.springframework.orm.hibernate3.HibernateCallback;" + NL + "import org.springframework.orm.hibernate3.support.HibernateDaoSupport;" + NL + "" + NL + "import com.honestspring.sys.model.ConditionParameter;" + NL + "import com.honestspring.sys.model.SearchParameter;" + NL + "import com.honestspring.sys.model.SortParameter;" + NL + "" + NL + "" + NL + "/** 统一数据访问接口实现 */" + NL + "public abstract class BaseDAOImpl extends HibernateDaoSupport implements BaseDAO {" + NL + "\tprivate StringBuffer sqlAppender = new StringBuffer();" + NL + "" + NL + "" + NL + "\t/** 统计指定类的查询结果 */" + NL + "\tpublic int countQuery(String hql) {" + NL + "\t\tfinal String counthql = hql;" + NL + "\t\tLong count = (Long) getHibernateTemplate().execute(" + NL + "\t\t\t\tnew HibernateCallback() {" + NL + "\t\t\t\t\tpublic Object doInHibernate(Session session)" + NL + "\t\t\t\t\t\t\tthrows HibernateException {" + NL + "\t\t\t\t\t\tQuery query = session.createQuery(counthql);" + NL + "\t\t\t\t\t\tquery.setMaxResults(1);" + NL + "\t\t\t\t\t\treturn query.uniqueResult();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\treturn count.intValue();" + NL + "\t}" + NL + "" + NL + "\t/** 删除指定ID的持久化对象 */" + NL + "\tpublic void delById(Class clazz, Serializable id) {" + NL + "\t\tgetHibernateTemplate().delete(getHibernateTemplate().load(clazz, id));" + NL + "\t}" + NL + "" + NL + "\t/** 装载指定类的所有持久化对象 */" + NL + "\tpublic List listAll(String clazz) {" + NL + "\t\treturn getHibernateTemplate().find(\"from \" + clazz + \" as a \");" + NL + "\t}" + NL + "" + NL + "\t/** 分页装载指定类的所有持久化对象 */" + NL + "\tpublic List listAll(String clazz, int pageNo, int pageSize) {" + NL + "\t\tfinal int pNo = pageNo;" + NL + "\t\tfinal int pSize = pageSize;" + NL + "\t\tfinal String hql = \"from \" + clazz + \" as a\";" + NL + "\t\tList list = getHibernateTemplate().executeFind(new HibernateCallback() {" + NL + "\t\t\tpublic Object doInHibernate(Session session)" + NL + "\t\t\t\t\tthrows HibernateException {" + NL + "\t\t\t\tQuery query = session.createQuery(hql);" + NL + "\t\t\t\tquery.setMaxResults(pSize);" + NL + "\t\t\t\tquery.setFirstResult(pNo);" + NL + "\t\t\t\tList result = query.list();" + NL + "\t\t\t\tif (!Hibernate.isInitialized(result))" + NL + "\t\t\t\t\tHibernate.initialize(result);" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\treturn list;" + NL + "\t}" + NL + "" + NL + "\t/** 加载指定ID的持久化对象 */" + NL + "\tpublic Object loadById(Class clazz, Serializable id) {" + NL + "\t\treturn getHibernateTemplate().get(clazz, id);" + NL + "\t}" + NL + "" + NL + "\t/** 加载满足条件的持久化对象 */" + NL + "\tpublic Object loadObject(String hql) {" + NL + "\t\tfinal String hql1 = hql;" + NL + "\t\tObject obj = null;" + NL + "\t\tList list = getHibernateTemplate().executeFind(new HibernateCallback() {" + NL + "\t\t\tpublic Object doInHibernate(Session session)" + NL + "\t\t\t\t\tthrows HibernateException {" + NL + "\t\t\t\tQuery query = session.createQuery(hql1);" + NL + "\t\t\t\treturn query.list();" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tif (list.size() > 0)" + NL + "\t\t\tobj = list.get(0);" + NL + "\t\treturn obj;" + NL + "\t}" + NL + "" + NL + "\t/** 查询指定类的满足条件的持久化对象 */" + NL + "\tpublic List query(String hql) {" + NL + "\t\tfinal String hql1 = hql;" + NL + "\t\treturn getHibernateTemplate().executeFind(new HibernateCallback() {" + NL + "\t\t\tpublic Object doInHibernate(Session session)" + NL + "\t\t\t\t\tthrows HibernateException {" + NL + "\t\t\t\tQuery query = session.createQuery(hql1);" + NL + "\t\t\t\treturn query.list();" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "" + NL + "\t/** 分页查询指定类的满足条件的持久化对象 */" + NL + "\tpublic List query(String hql, int pageNo, int pageSize) {" + NL + "\t\tfinal int pNo = pageNo;" + NL + "\t\tfinal int pSize = pageSize;" + NL + "\t\tfinal String hql1 = hql;" + NL + "\t\treturn getHibernateTemplate().executeFind(new HibernateCallback() {" + NL + "\t\t\tpublic Object doInHibernate(Session session)" + NL + "\t\t\t\t\tthrows HibernateException {" + NL + "\t\t\t\tQuery query = session.createQuery(hql1);" + NL + "\t\t\t\tquery.setMaxResults(pSize);" + NL + "\t\t\t\tquery.setFirstResult((pNo - 1) * pSize);" + NL + "\t\t\t\tList result = query.list();" + NL + "\t\t\t\tif (!Hibernate.isInitialized(result))" + NL + "\t\t\t\t\tHibernate.initialize(result);" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "" + NL + "\t/** 保存或更新指定的持久化对象 */" + NL + "\tpublic void saveOrUpdate(Object obj) {" + NL + "\t\tgetHibernateTemplate().saveOrUpdate(obj);" + NL + "\t}" + NL + "" + NL + "\t/** 条件更新数据 */" + NL + "\tpublic int update(String hql) {" + NL + "\t\tfinal String hql1 = hql;" + NL + "\t\treturn ((Integer) getHibernateTemplate().execute(" + NL + "\t\t\t\tnew HibernateCallback() {" + NL + "\t\t\t\t\tpublic Object doInHibernate(Session session)" + NL + "\t\t\t\t\t\t\tthrows HibernateException {" + NL + "\t\t\t\t\t\tQuery query = session.createQuery(hql1);" + NL + "\t\t\t\t\t\treturn query.executeUpdate();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t})).intValue();" + NL + "\t}" + NL + "" + NL + "\t/** 从连接池中取得一个JDBC连接 */" + NL + "\tpublic Connection getConnection() {" + NL + "\t\treturn getHibernateTemplate().getSessionFactory().getCurrentSession()" + NL + "\t\t\t\t.connection();" + NL + "\t}" + NL + "" + NL + "\t@Override" + NL + "\tpublic List listAll(SearchParameter searchParameter) {" + NL + "\t\tfinal int pageSize = searchParameter.getPageSize();" + NL + "\t\tfinal int pageNo = searchParameter.getPageNo();" + NL + "\t\tLinkedList<SortParameter> sortFields = searchParameter.getSortFields();" + NL + "\t\tLinkedList<ConditionParameter> conditionFields = searchParameter" + NL + "\t\t\t\t.getConditionFields();" + NL + "\t\tString targetClass = searchParameter.getClazz();" + NL + "\t\tsqlAppender.append(\"from \").append(targetClass).append(\" as \").append(targetClass.toLowerCase());" + NL + "\t\tString hql = \"\";" + NL + "\t\tif (conditionFields != null && conditionFields.size() > 0) {" + NL + "\t\t\tsqlAppender.append(\" WHERE \");" + NL + "\t\t\tfor (ConditionParameter searchPara : conditionFields) {" + NL + "\t\t\t\tsqlAppender.append(searchPara.getFieldName())" + NL + "\t\t\t\t.append(\" \").append(searchPara.getConditionType());" + NL + "\t\t\t\tif(searchPara.getFieldValue() instanceof String){" + NL + "\t\t\t\t\tsqlAppender.append(\" '\").append(searchPara.getFieldValue()).append(\"' AND \");" + NL + "\t\t\t\t}else if(searchPara.getFieldValue() instanceof Date){" + NL + "\t\t\t\t\tsqlAppender.append(\"TO_DATE('\").append(searchPara.getFieldValue())" + NL + "\t\t\t\t\t.append(\"','yyyy-mm-dd')\").append(\" AND \");" + NL + "\t\t\t\t}else{" + NL + "\t\t\t\t\tsqlAppender.append(searchPara.getFieldValue()).append(\" AND \");" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsqlAppender.append(\" 1=1\");" + NL + "\t\t}" + NL + "" + NL + "\t\tif (sortFields != null && sortFields.size() > 0) {" + NL + "\t\t\tsqlAppender.append(\" ORDER BY\");" + NL + "\t\t\tfor (SortParameter sortPara : sortFields) {" + NL + "\t\t\t\tsqlAppender.append(\" \").append(sortPara.getFieldName()).append(\" \")" + NL + "\t\t\t\t\t\t.append(sortPara.getSortType());" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\thql = sqlAppender.toString();" + NL + "\t\tsqlAppender.delete(0, sqlAppender.length());" + NL + "\t\treturn getHibernateTemplate().find(hql);" + NL + "\t}" + NL + "" + NL + "\t@Override" + NL + "\tpublic List listAll(String clazz," + NL + "\t\t\tLinkedList<ConditionParameter> conditionParameters) {" + NL + "\t\tString hql=\"\";" + NL + "\t\tsqlAppender.append(\"from \").append(clazz).append(\" as \").append(clazz.toLowerCase());" + NL + "\t\tif (conditionParameters != null && conditionParameters.size() > 0) {" + NL + "\t\t\tsqlAppender.append(\" WHERE \");" + NL + "\t\t\tfor (ConditionParameter searchPara : conditionParameters) {" + NL + "\t\t\t\tsqlAppender.append(searchPara.getFieldName())" + NL + "\t\t\t\t\t\t.append(\" \").append(searchPara.getConditionType());" + NL + "\t\t\t\t\t\tif(searchPara.getFieldValue() instanceof String){" + NL + "\t\t\t\t\t\t\tsqlAppender.append(\" '\").append(searchPara.getFieldValue()).append(\"' AND \");" + NL + "\t\t\t\t\t\t}else if(searchPara.getFieldValue() instanceof Date){ " + NL + "\t\t\t\t\t\t\tsqlAppender.append(\"TO_DATE('\").append(searchPara.getFieldValue())" + NL + "\t\t\t\t\t\t\t.append(\"','yyyy-mm-dd')\").append(\" AND \");" + NL + "\t\t\t\t\t\t}else{" + NL + "\t\t\t\t\t\t\tsqlAppender.append(searchPara.getFieldValue()).append(\" AND \");" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsqlAppender.append(\" 1=1\");" + NL + "\t\t}" + NL + "\t\thql = sqlAppender.toString();" + NL + "\t\tsqlAppender.delete(0, sqlAppender.length());" + NL + "\t\treturn getHibernateTemplate().find(hql);" + NL + "\t}" + NL + "" + NL + "\t@Override" + NL + "\tpublic int countAll(String clazz) {" + NL + "\t\t// TODO Auto-generated method stub" + NL + "\t\treturn 0;" + NL + "\t}" + NL + "}";

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
	JavaTemplateArgs args = (JavaTemplateArgs)argument;
	String modeName = args.getModeName();
	String packageName = args.getPackageName();
	String className = args.getClassName();
	String entityPackageName = args.getPackageNameInfo().getEntityPackageName();
	String daoPackageName = args.getPackageNameInfo().getDaoPackageName();
	String servicePackageName = args.getPackageNameInfo().getServicPackageName();
	String actionPackageName = args.getPackageNameInfo().getActionPackageName();
	
	String entityClassName = args.getClassNameInfo().getEntityClassName();
	String daoClassName = args.getClassNameInfo().getDaoClassName();
	String serviceClassName = args.getClassNameInfo().getServicClassName();
	String actionClassName = args.getClassNameInfo().getActionClassName();
	
	String entityObjectName = args.getClassNameInfo().getEntityObjectName();
	String daoObjectName = args.getClassNameInfo().getDaoObjectName();
	String serviceObjectName = args.getClassNameInfo().getServicObjectName();
	String actionObjectName = args.getClassNameInfo().getActionObjectName();

    stringBuffer.append(TEXT_1);
    stringBuffer.append(args.getPackageName());
    stringBuffer.append(TEXT_2);
    return stringBuffer.toString();
  }
}
